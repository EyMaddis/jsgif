{"version":3,"sources":["NeuQuant.js"],"names":["NeuQuant","exports","netsize","prime1","prime2","prime3","prime4","minpicturebytes","maxnetpos","netbiasshift","ncycles","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","alphadec","radbiasshift","radbias","alpharadbshift","alpharadbias","thepicture","lengthcount","samplefac","network","netindex","bias","freq","radpower","thepic","len","sample","i","p","Array","colorMap","map","index","k","l","j","inxbuild","smallpos","smallval","q","previouscol","startpos","learn","b","g","r","radius","rad","alpha","step","delta","samplepixels","pix","lim","contest","altersingle","alterneigh","dist","a","bestd","best","process","unbiasnet","lo","hi","m","e","n","biasdist","betafreq","bestpos","bestbiaspos","bestbiasd","apply","arguments"],"mappings":"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","file":"NeuQuant.js","sourcesContent":["/*\n * NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n */\n\n/*\n * This class handles Neural-Net quantization algorithm\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @version 0.1 AS3 implementation\n */\n\nexport default class NeuQuant {\n\tconstructor() {\n\t\tvar exports = {};\n\t\tvar netsize = 256; /* number of colours used */\n\n\t\t/* four primes near 500 - assume no image has a length so large */\n\t\t/* that it is divisible by all four primes */\n\n\t\tvar prime1 = 499;\n\t\tvar prime2 = 491;\n\t\tvar prime3 = 487;\n\t\tvar prime4 = 503;\n\t\tvar minpicturebytes = (3 * prime4); /* minimum size for input image */\n\n\t\t/*\n\t\t * Program Skeleton ---------------- [select samplefac in range 1..30] [read\n\t\t * image from input file] pic = (unsigned char*) malloc(3*width*height);\n\t\t * initnet(pic,3*width*height,samplefac); learn(); unbiasnet(); [write output\n\t\t * image header, using writecolourmap(f)] inxbuild(); write output image using\n\t\t * inxsearch(b,g,r)\n\t\t */\n\n\t\t/*\n\t\t * Network Definitions -------------------\n\t\t */\n\n\t\tvar maxnetpos = (netsize - 1);\n\t\tvar netbiasshift = 4; /* bias for colour values */\n\t\tvar ncycles = 100; /* no. of learning cycles */\n\n\t\t/* defs for freq and bias */\n\t\tvar intbiasshift = 16; /* bias for fractions */\n\t\tvar intbias = (1 << intbiasshift);\n\t\tvar gammashift = 10; /* gamma = 1024 */\n\t\tvar gamma = (1 << gammashift);\n\t\tvar betashift = 10;\n\t\tvar beta = (intbias >> betashift); /* beta = 1/1024 */\n\t\tvar betagamma = (intbias << (gammashift - betashift));\n\n\t\t/* defs for decreasing radius factor */\n\t\tvar initrad = (netsize >> 3); /* for 256 cols, radius starts */\n\t\tvar radiusbiasshift = 6; /* at 32.0 biased by 6 bits */\n\t\tvar radiusbias = (1 << radiusbiasshift);\n\t\tvar initradius = (initrad * radiusbias); /* and decreases by a */\n\t\tvar radiusdec = 30; /* factor of 1/30 each cycle */\n\n\t\t/* defs for decreasing alpha factor */\n\t\tvar alphabiasshift = 10; /* alpha starts at 1.0 */\n\t\tvar initalpha = (1 << alphabiasshift);\n\t\tvar alphadec; /* biased by 10 bits */\n\n\t\t/* radbias and alpharadbias used for radpower calculation */\n\t\tvar radbiasshift = 8;\n\t\tvar radbias = (1 << radbiasshift);\n\t\tvar alpharadbshift = (alphabiasshift + radbiasshift);\n\t\tvar alpharadbias = (1 << alpharadbshift);\n\n\t\t/*\n\t\t * Types and Global Variables --------------------------\n\t\t */\n\n\t\tvar thepicture; /* the input image itself */\n\t\tvar lengthcount; /* lengthcount = H*W*3 */\n\t\tvar samplefac; /* sampling factor 1..30 */\n\n\t\t// typedef int pixel[4]; /* BGRc */\n\t\tvar network; /* the network itself - [netsize][4] */\n\t\tvar netindex = [];\n\n\t\t/* for network lookup - really 256 */\n\t\tvar bias = [];\n\n\t\t/* bias and freq arrays for learning */\n\t\tvar freq = [];\n\t\tvar radpower = [];\n\n\t\tvar NeuQuant = exports.NeuQuant = function NeuQuant(thepic, len, sample) {\n\n\t\t\tvar i;\n\t\t\tvar p;\n\n\t\t\tthepicture = thepic;\n\t\t\tlengthcount = len;\n\t\t\tsamplefac = sample;\n\n\t\t\tnetwork = new Array(netsize);\n\n\t\t\tfor (i = 0; i < netsize; i++) {\n\n\t\t\t\tnetwork[i] = new Array(4);\n\t\t\t\tp = network[i];\n\t\t\t\tp[0] = p[1] = p[2] = (i << (netbiasshift + 8)) / netsize;\n\t\t\t\tfreq[i] = intbias / netsize; /* 1/netsize */\n\t\t\t\tbias[i] = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar colorMap = function colorMap() {\n\n\t\t\tvar map = [];\n\t\t\tvar index = new Array(netsize);\n\n\t\t\tfor (var i = 0; i < netsize; i++)\n\t\t\t\tindex[network[i][3]] = i;\n\n\t\t\tvar k = 0;\n\t\t\tfor (var l = 0; l < netsize; l++) {\n\t\t\t\tvar j = index[l];\n\t\t\t\tmap[k++] = (network[j][0]);\n\t\t\t\tmap[k++] = (network[j][1]);\n\t\t\t\tmap[k++] = (network[j][2]);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t};\n\n\t\t/*\n\t\t * Insertion sort of network and building of netindex[0..255] (to do after\n\t\t * unbias)\n\t\t * -------------------------------------------------------------------------------\n\t\t */\n\n\t\tvar inxbuild = function inxbuild() {\n\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar smallpos;\n\t\t\tvar smallval;\n\t\t\tvar p;\n\t\t\tvar q;\n\t\t\tvar previouscol;\n\t\t\tvar startpos;\n\n\t\t\tpreviouscol = 0;\n\t\t\tstartpos = 0;\n\t\t\tfor (i = 0; i < netsize; i++) {\n\n\t\t\t\tp = network[i];\n\t\t\t\tsmallpos = i;\n\t\t\t\tsmallval = p[1]; /* index on g */\n\n\t\t\t\t/* find smallest in i..netsize-1 */\n\t\t\t\tfor (j = i + 1; j < netsize; j++) {\n\n\t\t\t\t\tq = network[j];\n\t\t\t\t\tif (q[1] < smallval) { /* index on g */\n\t\t\t\t\t\tsmallpos = j;\n\t\t\t\t\t\tsmallval = q[1]; /* index on g */\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tq = network[smallpos];\n\n\t\t\t\t/* swap p (i) and q (smallpos) entries */\n\t\t\t\tif (i != smallpos) {\n\t\t\t\t\tj = q[0];\n\t\t\t\t\tq[0] = p[0];\n\t\t\t\t\tp[0] = j;\n\t\t\t\t\tj = q[1];\n\t\t\t\t\tq[1] = p[1];\n\t\t\t\t\tp[1] = j;\n\t\t\t\t\tj = q[2];\n\t\t\t\t\tq[2] = p[2];\n\t\t\t\t\tp[2] = j;\n\t\t\t\t\tj = q[3];\n\t\t\t\t\tq[3] = p[3];\n\t\t\t\t\tp[3] = j;\n\t\t\t\t}\n\n\t\t\t\t/* smallval entry is now in position i */\n\n\t\t\t\tif (smallval != previouscol) {\n\n\t\t\t\t\tnetindex[previouscol] = (startpos + i) >> 1;\n\n\t\t\t\t\tfor (j = previouscol + 1; j < smallval; j++) netindex[j] = i;\n\n\t\t\t\t\tpreviouscol = smallval;\n\t\t\t\t\tstartpos = i;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnetindex[previouscol] = (startpos + maxnetpos) >> 1;\n\t\t\tfor (j = previouscol + 1; j < 256; j++) netindex[j] = maxnetpos; /* really 256 */\n\t\t};\n\n\t\t/*\n\t\t * Main Learning Loop ------------------\n\t\t */\n\n\t\tvar learn = function learn() {\n\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar b;\n\t\t\tvar g;\n\t\t\tvar r;\n\t\t\tvar radius;\n\t\t\tvar rad;\n\t\t\tvar alpha;\n\t\t\tvar step;\n\t\t\tvar delta;\n\t\t\tvar samplepixels;\n\t\t\tvar p;\n\t\t\tvar pix;\n\t\t\tvar lim;\n\n\t\t\tif (lengthcount < minpicturebytes) samplefac = 1;\n\n\t\t\talphadec = 30 + ((samplefac - 1) / 3);\n\t\t\tp = thepicture;\n\t\t\tpix = 0;\n\t\t\tlim = lengthcount;\n\t\t\tsamplepixels = lengthcount / (3 * samplefac);\n\t\t\tdelta = (samplepixels / ncycles) | 0;\n\t\t\talpha = initalpha;\n\t\t\tradius = initradius;\n\n\t\t\trad = radius >> radiusbiasshift;\n\t\t\tif (rad <= 1) rad = 0;\n\n\t\t\tfor (i = 0; i < rad; i++) radpower[i] = alpha * (((rad * rad - i * i) * radbias) / (rad * rad));\n\n\t\t\tif (lengthcount < minpicturebytes) step = 3;\n\n\t\t\telse if ((lengthcount % prime1) !== 0) step = 3 * prime1;\n\n\t\t\telse {\n\n\t\t\t\tif ((lengthcount % prime2) !== 0) step = 3 * prime2;\n\t\t\t\telse {\n\t\t\t\t\tif ((lengthcount % prime3) !== 0) step = 3 * prime3;\n\t\t\t\t\telse step = 3 * prime4;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = 0;\n\t\t\twhile (i < samplepixels) {\n\n\t\t\t\tb = (p[pix + 0] & 0xff) << netbiasshift;\n\t\t\t\tg = (p[pix + 1] & 0xff) << netbiasshift;\n\t\t\t\tr = (p[pix + 2] & 0xff) << netbiasshift;\n\t\t\t\tj = contest(b, g, r);\n\n\t\t\t\taltersingle(alpha, j, b, g, r);\n\t\t\t\tif (rad !== 0) alterneigh(rad, j, b, g, r); /* alter neighbours */\n\n\t\t\t\tpix += step;\n\t\t\t\tif (pix >= lim) pix -= lengthcount;\n\n\t\t\t\ti++;\n\n\t\t\t\tif (delta === 0) delta = 1;\n\n\t\t\t\tif (i % delta === 0) {\n\t\t\t\t\talpha -= alpha / alphadec;\n\t\t\t\t\tradius -= radius / radiusdec;\n\t\t\t\t\trad = radius >> radiusbiasshift;\n\n\t\t\t\t\tif (rad <= 1) rad = 0;\n\n\t\t\t\t\tfor (j = 0; j < rad; j++) radpower[j] = alpha * (((rad * rad - j * j) * radbias) / (rad * rad));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t ** Search for BGR values 0..255 (after net is unbiased) and return colour\n\t\t * index\n\t\t * ----------------------------------------------------------------------------\n\t\t */\n\n\t\tvar map = exports.map = function map(b, g, r) {\n\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar dist;\n\t\t\tvar a;\n\t\t\tvar bestd;\n\t\t\tvar p;\n\t\t\tvar best;\n\n\t\t\tbestd = 1000; /* biggest possible dist is 256*3 */\n\t\t\tbest = -1;\n\t\t\ti = netindex[g]; /* index on g */\n\t\t\tj = i - 1; /* start at netindex[g] and work outwards */\n\n\t\t\twhile ((i < netsize) || (j >= 0)) {\n\n\t\t\t\tif (i < netsize) {\n\t\t\t\t\tp = network[i];\n\t\t\t\t\tdist = p[1] - g; /* inx key */\n\n\t\t\t\t\tif (dist >= bestd) i = netsize; /* stop iter */\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tif (dist < 0) dist = -dist;\n\t\t\t\t\t\ta = p[0] - b;\n\t\t\t\t\t\tif (a < 0) a = -a;\n\t\t\t\t\t\tdist += a;\n\n\t\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\t\ta = p[2] - r;\n\t\t\t\t\t\t\tif (a < 0) a = -a;\n\t\t\t\t\t\t\tdist += a;\n\n\t\t\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\t\t\tbestd = dist;\n\t\t\t\t\t\t\t\tbest = p[3];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (j >= 0) {\n\n\t\t\t\t\tp = network[j];\n\t\t\t\t\tdist = g - p[1]; /* inx key - reverse dif */\n\n\t\t\t\t\tif (dist >= bestd) j = -1; /* stop iter */\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t\tj--;\n\t\t\t\t\t\tif (dist < 0) dist = -dist;\n\t\t\t\t\t\ta = p[0] - b;\n\t\t\t\t\t\tif (a < 0) a = -a;\n\t\t\t\t\t\tdist += a;\n\n\t\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\t\ta = p[2] - r;\n\t\t\t\t\t\t\tif (a < 0) a = -a;\n\t\t\t\t\t\t\tdist += a;\n\t\t\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\t\t\tbestd = dist;\n\t\t\t\t\t\t\t\tbest = p[3];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (best);\n\t\t};\n\n\t\tvar process = exports.process = function process() {\n\t\t\tlearn();\n\t\t\tunbiasnet();\n\t\t\tinxbuild();\n\t\t\treturn colorMap();\n\t\t};\n\n\t\t/*\n\t\t * Unbias network to give byte values 0..255 and record position i to prepare\n\t\t * for sort\n\t\t * -----------------------------------------------------------------------------------\n\t\t */\n\n\t\tvar unbiasnet = function unbiasnet() {\n\n\t\t\tvar i;\n\t\t\tvar j;\n\n\t\t\tfor (i = 0; i < netsize; i++) {\n\t\t\t\tnetwork[i][0] >>= netbiasshift;\n\t\t\t\tnetwork[i][1] >>= netbiasshift;\n\t\t\t\tnetwork[i][2] >>= netbiasshift;\n\t\t\t\tnetwork[i][3] = i; /* record colour no */\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in\n\t\t * radpower[|i-j|]\n\t\t * ---------------------------------------------------------------------------------\n\t\t */\n\n\t\tvar alterneigh = function alterneigh(rad, i, b, g, r) {\n\n\t\t\tvar j;\n\t\t\tvar k;\n\t\t\tvar lo;\n\t\t\tvar hi;\n\t\t\tvar a;\n\t\t\tvar m;\n\t\t\tvar p;\n\n\t\t\tlo = i - rad;\n\t\t\tif (lo < -1) lo = -1;\n\n\t\t\thi = i + rad;\n\t\t\tif (hi > netsize) hi = netsize;\n\n\t\t\tj = i + 1;\n\t\t\tk = i - 1;\n\t\t\tm = 1;\n\n\t\t\twhile ((j < hi) || (k > lo)) {\n\t\t\t\ta = radpower[m++];\n\n\t\t\t\tif (j < hi) {\n\t\t\t\t\tp = network[j++];\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\n\t\t\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\n\t\t\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\n\t\t\t\t\t} catch (e) {} // prevents 1.3 miscompilation\n\t\t\t\t}\n\n\t\t\t\tif (k > lo) {\n\t\t\t\t\tp = network[k--];\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\n\t\t\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\n\t\t\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t * Move neuron i towards biased (b,g,r) by factor alpha\n\t\t * ----------------------------------------------------\n\t\t */\n\n\t\tvar altersingle = function altersingle(alpha, i, b, g, r) {\n\n\t\t\t/* alter hit neuron */\n\t\t\tvar n = network[i];\n\t\t\tn[0] -= (alpha * (n[0] - b)) / initalpha;\n\t\t\tn[1] -= (alpha * (n[1] - g)) / initalpha;\n\t\t\tn[2] -= (alpha * (n[2] - r)) / initalpha;\n\t\t};\n\n\t\t/*\n\t\t * Search for biased BGR values ----------------------------\n\t\t */\n\n\t\tvar contest = function contest(b, g, r) {\n\n\t\t\t/* finds closest neuron (min dist) and updates freq */\n\t\t\t/* finds best neuron (min dist-bias) and returns position */\n\t\t\t/* for frequently chosen neurons, freq[i] is high and bias[i] is negative */\n\t\t\t/* bias[i] = gamma*((1/netsize)-freq[i]) */\n\n\t\t\tvar i;\n\t\t\tvar dist;\n\t\t\tvar a;\n\t\t\tvar biasdist;\n\t\t\tvar betafreq;\n\t\t\tvar bestpos;\n\t\t\tvar bestbiaspos;\n\t\t\tvar bestd;\n\t\t\tvar bestbiasd;\n\t\t\tvar n;\n\n\t\t\tbestd = ~ (1 << 31);\n\t\t\tbestbiasd = bestd;\n\t\t\tbestpos = -1;\n\t\t\tbestbiaspos = bestpos;\n\n\t\t\tfor (i = 0; i < netsize; i++) {\n\t\t\t\tn = network[i];\n\t\t\t\tdist = n[0] - b;\n\t\t\t\tif (dist < 0) dist = -dist;\n\t\t\t\ta = n[1] - g;\n\t\t\t\tif (a < 0) a = -a;\n\t\t\t\tdist += a;\n\t\t\t\ta = n[2] - r;\n\t\t\t\tif (a < 0) a = -a;\n\t\t\t\tdist += a;\n\n\t\t\t\tif (dist < bestd) {\n\t\t\t\t\tbestd = dist;\n\t\t\t\t\tbestpos = i;\n\t\t\t\t}\n\n\t\t\t\tbiasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\n\n\t\t\t\tif (biasdist < bestbiasd) {\n\t\t\t\t\tbestbiasd = biasdist;\n\t\t\t\t\tbestbiaspos = i;\n\t\t\t\t}\n\n\t\t\t\tbetafreq = (freq[i] >> betashift);\n\t\t\t\tfreq[i] -= betafreq;\n\t\t\t\tbias[i] += (betafreq << gammashift);\n\t\t\t}\n\n\t\t\tfreq[bestpos] += beta;\n\t\t\tbias[bestpos] -= betagamma;\n\t\t\treturn (bestbiaspos);\n\t\t};\n\n\t\tNeuQuant.apply(this, arguments);\n\t\treturn exports;\n\t}\n}\n"],"sourceRoot":"/source/"}