{"version":3,"sources":["LZWEncoder.js"],"names":["LZWEncoder","exports","EOF","imgW","imgH","pixAry","initCodeSize","remaining","curPixel","BITS","HSIZE","n_bits","maxbits","maxcode","maxmaxcode","htab","codetab","hsize","free_ent","clear_flg","g_init_bits","ClearCode","EOFCode","cur_accum","cur_bits","masks","a_count","accum","width","height","pixels","color_depth","Math","max","char_out","c","outs","flush_char","cl_block","cl_hash","output","i","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","MAXCODE","nextPixel","outer_loop","encode","os","writeByte","writeBytes","pix","code","apply","arguments"],"mappings":"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","file":"LZWEncoder.js","sourcesContent":["/**\n * This class handles LZW encoding\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @version 0.1 AS3 implementation\n */\n\nexport default class LZWEncoder {\n\tconstructor() {\n\t\tvar exports = {};\n\t\tvar EOF = -1;\n\t\tvar imgW;\n\t\tvar imgH;\n\t\tvar pixAry;\n\t\tvar initCodeSize;\n\t\tvar remaining;\n\t\tvar curPixel;\n\n\t\t// GIFCOMPR.C - GIF Image compression routines\n\t\t// Lempel-Ziv compression based on 'compress'. GIF modifications by\n\t\t// David Rowley (mgardi@watdcsu.waterloo.edu)\n\t\t// General DEFINEs\n\n\t\tvar BITS = 12;\n\t\tvar HSIZE = 5003; // 80% occupancy\n\n\t\t// GIF Image compression - modified 'compress'\n\t\t// Based on: compress.c - File compression ala IEEE Computer, June 1984.\n\t\t// By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n\t\t// Jim McKie (decvax!mcvax!jim)\n\t\t// Steve Davies (decvax!vax135!petsd!peora!srd)\n\t\t// Ken Turkowski (decvax!decwrl!turtlevax!ken)\n\t\t// James A. Woods (decvax!ihnp4!ames!jaw)\n\t\t// Joe Orost (decvax!vax135!petsd!joe)\n\n\t\tvar n_bits; // number of bits/code\n\t\tvar maxbits = BITS; // user settable max # bits/code\n\t\tvar maxcode; // maximum code, given n_bits\n\t\tvar maxmaxcode = 1 << BITS; // should NEVER generate this code\n\t\tvar htab = [];\n\t\tvar codetab = [];\n\t\tvar hsize = HSIZE; // for dynamic table sizing\n\t\tvar free_ent = 0; // first unused entry\n\n\t\t// block compression parameters -- after all codes are used up,\n\t\t// and compression rate changes, start over.\n\n\t\tvar clear_flg = false;\n\n\t\t// Algorithm: use open addressing double hashing (no chaining) on the\n\t\t// prefix code / next character combination. We do a variant of Knuth's\n\t\t// algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n\t\t// secondary probe. Here, the modular division first probe is gives way\n\t\t// to a faster exclusive-or manipulation. Also do block compression with\n\t\t// an adaptive reset, whereby the code table is cleared when the compression\n\t\t// ratio decreases, but after the table fills. The variable-length output\n\t\t// codes are re-sized at this point, and a special CLEAR code is generated\n\t\t// for the decompressor. Late addition: construct the table according to\n\t\t// file size for noticeable speed improvement on small files. Please direct\n\t\t// questions about this implementation to ames!jaw.\n\n\t\tvar g_init_bits;\n\t\tvar ClearCode;\n\t\tvar EOFCode;\n\n\t\t// output\n\t\t// Output the given code.\n\t\t// Inputs:\n\t\t// code: A n_bits-bit integer. If == -1, then EOF. This assumes\n\t\t// that n_bits =< wordsize - 1.\n\t\t// Outputs:\n\t\t// Outputs code to the file.\n\t\t// Assumptions:\n\t\t// Chars are 8 bits long.\n\t\t// Algorithm:\n\t\t// Maintain a BITS character long buffer (so that 8 codes will\n\t\t// fit in it exactly). Use the VAX insv instruction to insert each\n\t\t// code in turn. When the buffer fills up empty it and start over.\n\n\t\tvar cur_accum = 0;\n\t\tvar cur_bits = 0;\n\t\tvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\n\t\t// Number of characters so far in this 'packet'\n\t\tvar a_count;\n\n\t\t// Define the storage for the packet accumulator\n\t\tvar accum = [];\n\n\t\tvar LZWEncoder = exports.LZWEncoder = function LZWEncoder(width, height, pixels, color_depth) {\n\t\t\timgW = width;\n\t\t\timgH = height;\n\t\t\tpixAry = pixels;\n\t\t\tinitCodeSize = Math.max(2, color_depth);\n\t\t};\n\n\t\t// Add a character to the end of the current packet, and if it is 254\n\t\t// characters, flush the packet to disk.\n\t\tvar char_out = function char_out(c, outs) {\n\t\t\taccum[a_count++] = c;\n\t\t\tif (a_count >= 254) flush_char(outs);\n\t\t};\n\n\t\t// Clear out the hash table\n\t\t// table clear for block compress\n\n\t\tvar cl_block = function cl_block(outs) {\n\t\t\tcl_hash(hsize);\n\t\t\tfree_ent = ClearCode + 2;\n\t\t\tclear_flg = true;\n\t\t\toutput(ClearCode, outs);\n\t\t};\n\n\t\t// reset code table\n\t\tvar cl_hash = function cl_hash(hsize) {\n\t\t\tfor (var i = 0; i < hsize; ++i) htab[i] = -1;\n\t\t};\n\n\t\tvar compress = exports.compress = function compress(init_bits, outs) {\n\n\t\t\tvar fcode;\n\t\t\tvar i; /* = 0 */\n\t\t\tvar c;\n\t\t\tvar ent;\n\t\t\tvar disp;\n\t\t\tvar hsize_reg;\n\t\t\tvar hshift;\n\n\t\t\t// Set up the globals: g_init_bits - initial number of bits\n\t\t\tg_init_bits = init_bits;\n\n\t\t\t// Set up the necessary values\n\t\t\tclear_flg = false;\n\t\t\tn_bits = g_init_bits;\n\t\t\tmaxcode = MAXCODE(n_bits);\n\n\t\t\tClearCode = 1 << (init_bits - 1);\n\t\t\tEOFCode = ClearCode + 1;\n\t\t\tfree_ent = ClearCode + 2;\n\n\t\t\ta_count = 0; // clear packet\n\n\t\t\tent = nextPixel();\n\n\t\t\thshift = 0;\n\t\t\tfor (fcode = hsize; fcode < 65536; fcode *= 2)\n\t\t\t\t++hshift;\n\t\t\thshift = 8 - hshift; // set hash code range bound\n\n\t\t\thsize_reg = hsize;\n\t\t\tcl_hash(hsize_reg); // clear hash table\n\n\t\t\toutput(ClearCode, outs);\n\n\t\t\touter_loop: while ((c = nextPixel()) != EOF) {\n\t\t\t\tfcode = (c << maxbits) + ent;\n\t\t\t\ti = (c << hshift) ^ ent; // xor hashing\n\n\t\t\t\tif (htab[i] == fcode) {\n\t\t\t\t\tent = codetab[i];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\telse if (htab[i] >= 0) { // non-empty slot\n\n\t\t\t\t\tdisp = hsize_reg - i; // secondary hash (after G. Knott)\n\t\t\t\t\tif (i === 0) disp = 1;\n\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif ((i -= disp) < 0)\n\t\t\t\t\t\t\ti += hsize_reg;\n\n\t\t\t\t\t\tif (htab[i] == fcode) {\n\t\t\t\t\t\t\tent = codetab[i];\n\t\t\t\t\t\t\tcontinue outer_loop;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (htab[i] >= 0);\n\t\t\t\t}\n\n\t\t\t\toutput(ent, outs);\n\t\t\t\tent = c;\n\t\t\t\tif (free_ent < maxmaxcode) {\n\t\t\t\t\tcodetab[i] = free_ent++; // code -> hashtable\n\t\t\t\t\thtab[i] = fcode;\n\t\t\t\t}\n\t\t\t\telse cl_block(outs);\n\t\t\t}\n\n\t\t\t// Put out the final code.\n\t\t\toutput(ent, outs);\n\t\t\toutput(EOFCode, outs);\n\t\t};\n\n\t\t// ----------------------------------------------------------------------------\n\t\tvar encode = exports.encode = function encode(os) {\n\t\t\tos.writeByte(initCodeSize); // write \"initial code size\" byte\n\t\t\tremaining = imgW * imgH; // reset navigation variables\n\t\t\tcurPixel = 0;\n\t\t\tcompress(initCodeSize + 1, os); // compress and write the pixel data\n\t\t\tos.writeByte(0); // write block terminator\n\t\t};\n\n\t\t// Flush the packet to disk, and reset the accumulator\n\t\tvar flush_char = function flush_char(outs) {\n\t\t\tif (a_count > 0) {\n\t\t\t\touts.writeByte(a_count);\n\t\t\t\touts.writeBytes(accum, 0, a_count);\n\t\t\t\ta_count = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar MAXCODE = function MAXCODE(n_bits) {\n\t\t\treturn (1 << n_bits) - 1;\n\t\t};\n\n\t\t// ----------------------------------------------------------------------------\n\t\t// Return the next pixel from the image\n\t\t// ----------------------------------------------------------------------------\n\n\t\tvar nextPixel = function nextPixel() {\n\t\t\tif (remaining === 0) return EOF;\n\t\t\t--remaining;\n\t\t\tvar pix = pixAry[curPixel++];\n\t\t\treturn pix & 0xff;\n\t\t};\n\n\t\tvar output = function output(code, outs) {\n\n\t\t\tcur_accum &= masks[cur_bits];\n\n\t\t\tif (cur_bits > 0) cur_accum |= (code << cur_bits);\n\t\t\telse cur_accum = code;\n\n\t\t\tcur_bits += n_bits;\n\n\t\t\twhile (cur_bits >= 8) {\n\t\t\t\tchar_out((cur_accum & 0xff), outs);\n\t\t\t\tcur_accum >>= 8;\n\t\t\t\tcur_bits -= 8;\n\t\t\t}\n\n\t\t\t// If the next entry is going to be too big for the code size,\n\t\t\t// then increase it, if possible.\n\n\t\t\tif (free_ent > maxcode || clear_flg) {\n\n\t\t\t\tif (clear_flg) {\n\n\t\t\t\t\tmaxcode = MAXCODE(n_bits = g_init_bits);\n\t\t\t\t\tclear_flg = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t++n_bits;\n\t\t\t\t\tif (n_bits == maxbits) maxcode = maxmaxcode;\n\t\t\t\t\telse maxcode = MAXCODE(n_bits);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (code == EOFCode) {\n\n\t\t\t\t// At EOF, write the rest of the buffer.\n\t\t\t\twhile (cur_bits > 0) {\n\t\t\t\t\tchar_out((cur_accum & 0xff), outs);\n\t\t\t\t\tcur_accum >>= 8;\n\t\t\t\t\tcur_bits -= 8;\n\t\t\t\t}\n\n\t\t\t\tflush_char(outs);\n\t\t\t}\n\t\t};\n\n\t\tLZWEncoder.apply(this, arguments);\n\t\treturn exports;\n\t}\n}\n"],"sourceRoot":"/source/"}